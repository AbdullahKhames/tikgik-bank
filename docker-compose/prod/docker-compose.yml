version: '3.8'

services:
  # rabbit:
  #   image: rabbitmq:4.0-management
  #   hostname: rabbitmq
  #   ports:
  #     - "5672:5672"
  #     - "15672:15672"
  #   healthcheck:
  #     test: rabbitmq-diagnostics check_port_connectivity
  #     interval: 10s
  #     timeout: 5s
  #     retries: 10
  #     start_period: 5s
  #   extends:
  #     file: common-config.yml
  #     service: network-deploy-service
  keycloak:
    image: quay.io/keycloak/keycloak:26.0.7
    container_name: keycloak
    ports:
      - "7080:8080"
    environment:
      KEYCLOAK_ADMIN: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "admin"
    command: "start-dev"
    extends:
      file: common-config.yml
      service: network-deploy-service
  read:
    image: grafana/loki:3.1.2
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - "3101:3100"
      - "7946"
      - "9095"
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      tikgikBank:
        aliases:
          - loki

  write:
    image: grafana/loki:3.1.2
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - "3102:3100"
      - "7946"
      - "9095"
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  alloy:
    image: grafana/alloy:v1.5.1
    volumes:
      - ../observability/alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - "12345:12345"
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-deploy-service

  minio:
    image: minio/minio:RELEASE.2024-12-18T13-15-44Z
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - "9000"
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  prometheus:
    image: prom/prometheus:v3.1.0
    container_name: prometheus
    ports:
      - ":9090"
    volumes:
      - ../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    extends:
      file: common-config.yml
      service: network-deploy-service

  tempo:
    image: grafana/tempo:2.6.1
    container_name: tempo
    command: -config.file /etc/tempo-config.yml
    ports:
      - "3110:3100"
      - "4318:4318"
    volumes:
      - ../observability/tempo/tempo.yml:/etc/tempo-config.yml
    extends:
      file: common-config.yml
      service: network-deploy-service

  grafana:
    image: grafana/grafana:11.4.0
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ../observability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  backend:
    image: grafana/loki:3.1.2
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-deploy-service

  gateway:
    image: nginx:1.27.3
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service
  redis:
    image: redis
    container_name: redis-Db
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      timeout: 10s
      retries: 10
    extends:
      file: common-config.yml
      service: network-deploy-service
    volumes:
      - redisdb-data:/data
    command: ["redis-server", "--appendonly", "yes"]
  accountsDb:
    image: postgres
    container_name: accounts-Db
    ports:
      - "5432:5432"
    volumes:
      - accountdb-data:/var/lib/postgresql/data
      - D:\dev\projects\tikgik-bank\account\init.sql:/docker-entrypoint-initdb.d/init.sql
    extends:
      file: common-config.yml
      service: microservice-db-config

  banksDb:
    image: postgres
    container_name: banks-Db
    ports:
      - "5433:5432"
    volumes:
      - bankdb-data:/var/lib/postgresql/data
      - D:\dev\projects\tikgik-bank\bank\init.sql:/docker-entrypoint-initdb.d/init.sql
    extends:
      file: common-config.yml
      service: microservice-db-config

  cardsDb:
    image: postgres
    container_name: cards-Db
    ports:
      - "5434:5432"
    volumes:
      - carddb-data:/var/lib/postgresql/data
      - D:\dev\projects\tikgik-bank\card\init.sql:/docker-entrypoint-initdb.d/init.sql
    extends:
      file: common-config.yml
      service: microservice-db-config
  configserver:
    # build:
    #   context: ../../configserver
    #   dockerfile: Dockerfile
    image: khames96/configserver:s12
    container_name: configserver-ms
    ports:
      - "8071:8071"
    # depends_on:
    #   rabbit:
    #     condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "--silent", "http://localhost:8071/actuator/health/readiness"]
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-base-config
    environment:
      OTEL_SERVICE_NAME: "configserver"
  eurekaserver:
    # build:
    #   context: ../../eurekaserver
    #   dockerfile: Dockerfile
    image: khames96/eurekaserver:s12
    container_name: eurekaserver-ms
    ports:
      - "8070:8070"
    healthcheck:
      test: ["CMD", "curl", "--fail", "--silent", "http://localhost:8070/actuator/health/readiness"]
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-base-config
    depends_on:
      configserver:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: eurekaserver
      OTEL_SERVICE_NAME: "eurekaserver"
      CONFIG_SERVER_URL: configserver:http://configserver:8071/
      SPRING_CONFIG_IMPORT: configserver:http://configserver:8071/

  gatewayserver:
    # build:
    #   context: ../../gatewayserver
    #   dockerfile: Dockerfile
    image: khames96/gatetwayserver:s12
    container_name: gatewayserver-ms
    ports:
      - "8072:8072"
    extends:
      file: common-config.yml
      service: microservice-eureka-config
    depends_on:
      accounts:
        condition: service_healthy
      banks:
        condition: service_healthy
      cards:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: gatewayserver
      EUREKA_SERVER_URL: http://eurekaserver:8070/eureka/
      CONFIG_SERVER_URL: configserver:http://configserver:8071/
      SPRING_CONFIG_IMPORT: configserver:http://configserver:8071/
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eurekaserver:8070/eureka/
      SPRING_DATA_REDIS_CONNECT-TIMEOUT: 2s
      SPRING_DATA_REDIS_HOST: redis
      REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_TIMEOUT: 1s
      OTEL_SERVICE_NAME: "gatewayserver"
      JWK-SET-URI: "http://keycloak:8080/realms/master/protocol/openid-connect/certs"
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI: "http://keycloak:8080/realms/master/protocol/openid-connect/certs"

  accounts:
    # build:
    #   context: ../../account
    #   dockerfile: Dockerfile
    image: khames96/account:s12
    container_name: accounts-ms
    #    ports:
    #      - "8081:8081"
    depends_on:
      accountsDb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "--silent", "http://localhost:8081/api/actuator/health/readiness"]
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "account"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://accountsDb:5432/tikgik_bank_account"
      OTEL_SERVICE_NAME: "accounts"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  banks:
    # build:
    #   context: ../../bank
    #   dockerfile: Dockerfile
    image: khames96/bank:s12
    container_name: banks-ms
    #    ports:
    #      - "8083:8083"
    depends_on:
      banksDb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "--silent", "http://localhost:8083/api/actuator/health/readiness"]
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "bank"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://banksDb:5432/tikgik_bank_bank"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  cards:
    # build:
    #   context: ../../card
    #   dockerfile: Dockerfile
    image: khames96/card:s12
    container_name: cards-ms
    #    ports:
    #      - "8082:8082"
    depends_on:
      cardsDb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "--silent", "http://localhost:8082/api/actuator/health/readiness"]
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "card"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://cardsDb:5432/tikgik_bank_card"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  banks1:
    # build:
    #   context: ../../bank
    #   dockerfile: Dockerfile
    image: khames96/bank:s12
    container_name: banks-ms1
    #    ports:
    #      - "8084:8083"
    depends_on:
      banksDb:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "bank"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://banksDb:5432/tikgik_bank_bank"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  cards1:
    # build:
    #   context: ../../card
    #   dockerfile: Dockerfile
    image: khames96/card:s12
    container_name: cards-ms1
    #    ports:
    #      - "8085:8082"
    depends_on:
      cardsDb:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "card"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://cardsDb:5432/tikgik_bank_card"
    extends:
      file: common-config.yml
      service: microservice-eureka-config


networks:
  tikgikBank:
    driver: "bridge"

volumes:
  accountdb-data:
  bankdb-data:
  carddb-data:
  redisdb-data:
